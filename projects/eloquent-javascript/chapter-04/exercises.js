////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// should take two numbers
// should return an array containing all the numbers between the two numbers
// should include the original two numbers in array
// return the array
function range(start, end, step = start <= end ? 1 : -1) {
  var result = [];
  if (start === end) {
    return result;
  }
  else {
    for (let i = start; step >= 0 ? i <= end : i >= end; i += step) {
      result.push(i);
    }
  }
  return result;
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(nums) {
  if (!nums.length) {
    return 0;
  }
  else {
    return nums.reduce((a, b) => a += b);
  }
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(arr) {
  var result = [];
  for (let ele of arr) {
    result.unshift(ele);
  }
  return result;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(arr) {
  for (let i = 0; i < Math.floor(arr.length / 2); i++) {
    let swap = arr[i];
    arr[i] = arr[arr.length - i - 1];
    arr[arr.length - i - 1] = swap;
  }
  return arr;
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  var result = {};
  if (Array.isArray(array)) {
    let current = result;
    for (let item of array) {
      let newItem = {
        value: item,
        rest: null
      };
      if (current.rest === undefined) {
        result = newItem;
      }
      else {
        current.rest = newItem;
      }
      current = newItem;
    }
  }
  return result;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list) {
  var result = [];
  if (!list || !list.value || !list.rest) {
    return result;
  }
  else {
    result.push(list.value);
    while (list.rest) {
      list = list.rest;
      if (list.hasOwnProperty('value')) {
        result.push(list.value);
      }
    }
  }
  return result;
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(element, list) {
  return {
    value: element,
    rest: list
  };
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, num) {
  return listToArray(list)[num];
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
function deepEqual(x, y) {
  if (x === y) return true;

  if (x == null || typeof x !== 'object' ||
    y == null || typeof y !== 'object') {
    return false;
  }
  var xProps = 0,
    yProps = 0;

  for (var prop in x)
    xProps += 1;

  for (var prop in y) {
    yProps += 1;
    if (!(prop in x) || !deepEqual(x[prop], y[prop])) {
      return false;
    }
  }

  return xProps == yProps;
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
